{
  "version": 3,
  "sources": ["../../pinia-plugin-unistorage/dist/index.mjs"],
  "sourcesContent": ["function get(state, path) {\n  return path.reduce((obj, p) => {\n    return obj?.[p];\n  }, state);\n}\nfunction set(state, path, val) {\n  return path.slice(0, -1).reduce((obj, p) => {\n    if (!/^(__proto__)$/.test(p))\n      return obj[p] = obj[p] || {};\n    else\n      return {};\n  }, state)[path[path.length - 1]] = val, state;\n}\nfunction pick(baseState, paths) {\n  return paths.reduce((substate, path) => {\n    const pathArray = path.split(\".\");\n    return set(\n      substate,\n      pathArray,\n      get(baseState, pathArray)\n    );\n  }, {});\n}\n\nconst isObject = (v) => typeof v === \"object\" && v !== null;\nconst normalizeOptions = (options, globalOptions) => {\n  options = isObject(options) ? options : /* @__PURE__ */ Object.create(null);\n  return new Proxy(options, {\n    get(t, p, r) {\n      return Reflect.get(t, p, r) || Reflect.get(globalOptions, p, r);\n    }\n  });\n};\n\nfunction passage(key) {\n  return key;\n}\nfunction createUnistorage(globalOptions = {}) {\n  const { key: normalizeKey = passage } = globalOptions || {};\n  if (globalOptions?.key) {\n    delete globalOptions.key;\n  }\n  return function(ctx) {\n    {\n      const { store, options } = ctx;\n      let { unistorage } = options || {};\n      if (!unistorage)\n        return;\n      const {\n        paths = null,\n        afterRestore,\n        beforeRestore,\n        serializer = {\n          serialize: JSON.stringify,\n          deserialize: JSON.parse\n        },\n        key = store.$id\n      } = normalizeOptions(unistorage, globalOptions);\n      beforeRestore?.(ctx);\n      const normalizedKey = normalizeKey(key);\n      try {\n        const fromStorage = uni.getStorageSync(normalizedKey);\n        if (fromStorage) {\n          store.$patch(serializer.deserialize(fromStorage));\n        }\n      } catch (_error) {\n      }\n      afterRestore?.(ctx);\n      store.$subscribe(\n        (_, state) => {\n          try {\n            const toStore = Array.isArray(paths) ? pick(state, paths) : state;\n            uni.setStorageSync(\n              normalizedKey,\n              serializer.serialize(toStore)\n            );\n          } catch (_error) {\n          }\n        },\n        { detached: true }\n      );\n    }\n  };\n}\n\nexport { createUnistorage };\n"],
  "mappings": ";AAAA,SAAS,IAAI,OAAO,MAAM;AACxB,SAAO,KAAK,OAAO,CAAC,KAAK,MAAM;AAC7B,WAAO,2BAAM;AAAA,EACf,GAAG,KAAK;AACV;AACA,SAAS,IAAI,OAAO,MAAM,KAAK;AAC7B,SAAO,KAAK,MAAM,GAAG,EAAE,EAAE,OAAO,CAAC,KAAK,MAAM;AAC1C,QAAI,CAAC,gBAAgB,KAAK,CAAC;AACzB,aAAO,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC;AAAA;AAE3B,aAAO,CAAC;AAAA,EACZ,GAAG,KAAK,EAAE,KAAK,KAAK,SAAS,CAAC,CAAC,IAAI,KAAK;AAC1C;AACA,SAAS,KAAK,WAAW,OAAO;AAC9B,SAAO,MAAM,OAAO,CAAC,UAAU,SAAS;AACtC,UAAM,YAAY,KAAK,MAAM,GAAG;AAChC,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA,IAAI,WAAW,SAAS;AAAA,IAC1B;AAAA,EACF,GAAG,CAAC,CAAC;AACP;AAEA,IAAM,WAAW,CAAC,MAAM,OAAO,MAAM,YAAY,MAAM;AACvD,IAAM,mBAAmB,CAAC,SAAS,kBAAkB;AACnD,YAAU,SAAS,OAAO,IAAI,UAA0B,uBAAO,OAAO,IAAI;AAC1E,SAAO,IAAI,MAAM,SAAS;AAAA,IACxB,IAAI,GAAG,GAAG,GAAG;AACX,aAAO,QAAQ,IAAI,GAAG,GAAG,CAAC,KAAK,QAAQ,IAAI,eAAe,GAAG,CAAC;AAAA,IAChE;AAAA,EACF,CAAC;AACH;AAEA,SAAS,QAAQ,KAAK;AACpB,SAAO;AACT;AACA,SAAS,iBAAiB,gBAAgB,CAAC,GAAG;AAC5C,QAAM,EAAE,KAAK,eAAe,QAAQ,IAAI,iBAAiB,CAAC;AAC1D,MAAI,+CAAe,KAAK;AACtB,WAAO,cAAc;AAAA,EACvB;AACA,SAAO,SAAS,KAAK;AACnB;AACE,YAAM,EAAE,OAAO,QAAQ,IAAI;AAC3B,UAAI,EAAE,WAAW,IAAI,WAAW,CAAC;AACjC,UAAI,CAAC;AACH;AACF,YAAM;AAAA,QACJ,QAAQ;AAAA,QACR;AAAA,QACA;AAAA,QACA,aAAa;AAAA,UACX,WAAW,KAAK;AAAA,UAChB,aAAa,KAAK;AAAA,QACpB;AAAA,QACA,MAAM,MAAM;AAAA,MACd,IAAI,iBAAiB,YAAY,aAAa;AAC9C,qDAAgB;AAChB,YAAM,gBAAgB,aAAa,GAAG;AACtC,UAAI;AACF,cAAM,cAAc,IAAI,eAAe,aAAa;AACpD,YAAI,aAAa;AACf,gBAAM,OAAO,WAAW,YAAY,WAAW,CAAC;AAAA,QAClD;AAAA,MACF,SAAS,QAAP;AAAA,MACF;AACA,mDAAe;AACf,YAAM;AAAA,QACJ,CAAC,GAAG,UAAU;AACZ,cAAI;AACF,kBAAM,UAAU,MAAM,QAAQ,KAAK,IAAI,KAAK,OAAO,KAAK,IAAI;AAC5D,gBAAI;AAAA,cACF;AAAA,cACA,WAAW,UAAU,OAAO;AAAA,YAC9B;AAAA,UACF,SAAS,QAAP;AAAA,UACF;AAAA,QACF;AAAA,QACA,EAAE,UAAU,KAAK;AAAA,MACnB;AAAA,IACF;AAAA,EACF;AACF;",
  "names": []
}
